import React, { Component } from 'react';
import './App.css';

// 1 - Crie uma aplica√ß√£o React com npx create-react-app fancy-buttons. Altere o componente App.js para que seja um componente de classe e contenha um bot√£o associado a um evento que imprime um texto qualquer via console.log(). N√£o precisa se preocupar com a sintaxe correta para fun√ß√µes de eventos por enquanto!
// function handleClick() {
//   console.log('Clicou no bot√£o 1!');
// }

// function handleClick2() {
//   console.log('Clicou no bot√£o 2!');
// }

// function handleClick3() {
//   console.log('Clicou no bot√£o 3!');
// }

// 7. Defina uma l√≥gica que estabele√ßa que, quando o n√∫mero de cliques no bot√£o for par, ele deve ser verde.
// A cor atual do bot√£o deve ser impressa num console.log() de dentro da fun√ß√£o do evento que lida com o clique. 8. Fa√ßa isso acontecer!
// ü¶ú Dica: Lembre-se de substituir a refer√™ncia √† fun√ß√£o, no evento, por uma callback que invoca!

class App extends Component {
  // 3 - Declare dentro da classe do seu componente dos exerc√≠cios de fixa√ß√£o acima a fun√ß√£o que lida com o evento que antes era lidado por uma fun√ß√£o do lado de fora da classe!
  constructor() {
    super()

    // 4 - Garanta acesso ao objeto this na fun√ß√£o que voc√™ declarou.
    this.handleClick = this.handleClick.bind(this);
    this.handleClick2 = this.handleClick2.bind(this);
    this.handleClick3 = this.handleClick3.bind(this);

    // 5 - Agora voc√™ vai converter sua aplica√ß√£o para uma que conta o n√∫mero de cliques dado em cada bot√£o! Primeiramente, defina um estado inicial para a contagem de cada bot√£o.
    // ü¶ú Dica: Uma possibilidade √© voc√™ definir tr√™s chaves, uma para cada bot√£o!
    this.state = {
      cliquesBotao: 0,
      cliquesBotao2: 0,
      cliquesBotao3: 0
    }
  }

  // 6 - Agora, quando um bot√£o foi clicado, altere de forma ass√≠ncrona o estado deste bot√£o de zero para um.
  handleClick() {
    console.log('Clicou no bot√£o 1!');
    // 7 - Por fim, baseie-se no estado anterior ao atual para incrementar a contagem de cliques cada vez que um bot√£o for clicado!
    this.setState((estadoAnterior, _props) => ({
      cliquesBotao: estadoAnterior.cliquesBotao + 1
    }))
  }

  handleClick2() {
    console.log('Clicou no bot√£o 2!');
    this.setState((estadoAnterior, _props) => ({
      cliquesBotao2: estadoAnterior.cliquesBotao2 + 1
    }))
  }

  handleClick3() {
    console.log('Clicou no bot√£o 3!');
    this.setState((estadoAnterior, _props) => ({
      cliquesBotao3: estadoAnterior.cliquesBotao3 + 1
    }))
  }

  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Meu bot√£o 1 {this.state.cliquesBotao}</button>
        {/* 2 - Fa√ßa com que sua aplica√ß√£o exiba tr√™s bot√µes lado a lado com textos diferentes. Cada bot√£o clicado deve acionar um evento diferente, cada um escrevendo algo diferente no console do navegador via console.log(). */}
        <button onClick={this.handleClick2}>Meu bot√£o 2 {this.state.cliquesBotao2}</button>
        <button onClick={this.handleClick3}>Meu bot√£o 3 {this.state.cliquesBotao3}</button>
      </div>
    )
  }
}

export default App;


// import React, { Component } from 'react';
// import './App.css';

// class App extends Component {
//   // A fun√ß√£o 'constructor' √© a primeira coisa que √© executada, quando um componente React √© criado, ou seja, quando √© colocado na tela do navegador.
//   constructor() {
//     // A fun√ß√£o `super()` √© chamada para garantir que a l√≥gica interna do React rode **antes** da sua. Se n√£o for assim, o c√≥digo n√£o funcionar√°
//     super()
//     // A l√≥gica extra vai aqui! A fun√ß√£o abaixo vincula "manualmente" o `this` √† nossa fun√ß√£o
//     this.handleClick = this.handleClick.bind(this)

//   }
//   handleClick() {
//     // Essa chamada ao 'this' retorna 'undefined'?!
//     // console.log(this)
//     // Agora esse log retorna o objeto `this`!
//     // Com isso, podemos acessar as `props`, estado do componente (ainda vamos ver como!)
//     // e tudo o mais daqui de dentro
//     // console.log(this)
//     console.log('Clicou!')
//   }

//   render() {
//     // J√° essa chamada ao 'this', feita de dentro da fun√ß√£o 'render', retorna o objeto que esperamos
//     console.log(this)

//     return (
//       <div>
//         {/* No React, precisamos dizer explicitamente que queremos uma fun√ß√£o de dentro da nossa classe
//         atrav√©s da sintaxe `this.minhaFuncao` para us√°-la num evento */}
//         <button onClick={this.handleClick}>Meu bot√£o 1</button>
//       </div>
//     )
//   }
// }

// export default App;
